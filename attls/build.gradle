plugins {
    id 'java-library'
    id 'maven-publish'
    id 'jacoco'
    id 'com.adarshr.test-logger' version "${testLoggerVersion}"
}

ext {
    sharedObjectFilePath = 'src/main/resources/lib/libzowe-attls.so'
    sharedObjectFilePath2 = 'src/main/resources/lib/libzowe-attls-31.so'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    compileOnly libraries.lombok

    annotationProcessor libraries.lombok

    testImplementation libraries.junitJupiter
    testImplementation libraries.mockito_core
    testImplementation libraries.mockito_jupiter
    testImplementation group: 'org.springframework', name: 'spring-test', version: '5.2.13.RELEASE'
}

configurations.all {
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    exclude group: 'junit', module: 'junit'
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}

test {
    useJUnitPlatform()
}

testlogger {
    theme 'mocha'
}

jacoco {
    toolVersion = '0.8.4'
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
    doLast {
        println "JaCoCo Test report from Commons Spring written to: ${jacocoTestReport.reports.html.destination}/index.html"
    }
}

task testJar(type: Jar) {
    baseName = project.name + '-tests'
    from sourceSets.test.output
    from 'src/main/resources'
}

jacocoTestReport.dependsOn test

check.dependsOn jacocoTestReport

compileJava.dependsOn(processResources)

task zosbuild(type: Exec) {
    inputs.dir('zossrc').withPathSensitivity(PathSensitivity.RELATIVE)
    outputs.cacheIf { true }
    outputs.file(sharedObjectFilePath)
    outputs.file(sharedObjectFilePath2)
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine 'zowe-api-dev.cmd', 'zosbuild'
    } else {
        commandLine 'npx', 'zowe-api-dev', 'zosbuild'
    }
}


task checkSharedObject {
    doFirst {
        def f = new File(projectDir, sharedObjectFilePath)
        if (!f.exists()) {
            throw new GradleException("Shared object $sharedObjectFilePath is missing. Run `./gradlew zosbuild` in directory $projectDir to build it yourself")
        }
        def f2 = new File(projectDir, sharedObjectFilePath2)
        if (!f2.exists()) {
            throw new GradleException("Shared object $sharedObjectFilePath2 is missing. Run `./gradlew zosbuild` in directory $projectDir to build it yourself")
        }
    }
}

jar.dependsOn checkSharedObject

task wrapper(){

}

task prepareKotlinBuildScriptModel(){

}

publishing {
    publications {
        mavenJavaLib(MavenPublication) {
            artifact jar
        }
    }
}
