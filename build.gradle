import java.util.regex.Matcher
group 'org.zowe.commons'

buildscript {
    ext {
        licenseGradlePluginVerion = '0.13.1'
    }

    ext.mavenRepositories = {
        maven {
            url artifactoryMavenSnapshotRepo
            credentials {
                username mavenUser
                password mavenPassword
            }
        }
        maven {
            url artifactoryMavenRepo
            credentials {
                username mavenUser
                password mavenPassword
            }
        }
    }

    repositories mavenRepositories
    apply from: 'gradle/versions.gradle'
    apply from: 'gradle/license.gradle'
    dependencies {
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.1.1'
        classpath 'net.researchgate:gradle-release:2.7.0'
        classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:${licenseGradlePluginVerion}"
        classpath 'org.owasp:dependency-check-gradle:3.3.4'
    }

}



apply from: 'gradle/versions.gradle'
apply from: 'gradle/license.gradle'
apply from: 'gradle/publish.gradle'

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'com.github.hierynomus.license'
    apply plugin: 'org.owasp.dependencycheck'
    apply plugin: 'eclipse'
    apply plugin: 'maven-publish'

    repositories mavenRepositories

    java.sourceCompatibility = JavaVersion.VERSION_1_8
    java.targetCompatibility = JavaVersion.VERSION_1_8
    version = version

    idea {
        module {
            //noinspection GroovyAssignabilityCheck
            outputDir file('build/classes/main')
            //noinspection GroovyAssignabilityCheck
            testOutputDir file('build/classes/test')
            downloadJavadoc = true
            downloadSources = true
        }
    }
}
subprojects {
    license {
        header rootProject.file('.licence/EPL-2.0-licence-header.txt')
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        excludes(["**/*.yml","**/*.yaml", "**/*.json", "**/*.sh", "**/*.txt", "**/*.p12", "**/*.xml", "**/*.jsp", "**/*.html", "**/*.jks", "**/*.so", "**/*.md", "**/*.pub"])
        mapping {
            java = 'SLASHSTAR_STYLE'
        }
    }
}

task publishAllVersions {
    group 'Zowe Publishing'
    description 'Publish ZIP file and SDK libraries to Zowe Artifactory'
    doLast {
        println 'Published ZIP file and libraries'
    }
}

publishAllVersions.dependsOn publishSdkArtifacts

apply plugin: 'net.researchgate.release'

ext.releaseScope = project.hasProperty('release.scope') ? project.getProperty('release.scope') : 'patch'

release {
    failOnCommitNeeded = true
    failOnPublishNeeded = true
    failOnSnapshotDependencies = true
    failOnUnversionedFiles = false
    failOnUpdateNeeded = true
    revertOnFail = true
    preCommitText = '[Gradle Release plugin]'
    preTagCommitMessage = 'Before tag commit'
    tagCommitMessage = 'Release:'
    tagTemplate = 'v${version}'
    newVersionCommitMessage = 'Create new version:'
    versionPropertyFile = 'gradle.properties'

    if (releaseScope == 'minor') {
        versionPatterns = [
                /[.]*\.(\d+)\.(\d+)[.]*/: { Matcher m, Project p -> m.replaceAll(".${(m[0][1] as int) + 1}.0") }
        ]
    } else if (releaseScope == 'major') {
        versionPatterns = [
                /(\d+)\.(\d+)\.(\d+)[.]*/: { Matcher m, Project p -> m.replaceAll("${(m[0][1] as int) + 1}.0.0") }
        ]
    } else {
        versionPatterns = [
                /(\d+)([^\d]*$)/: { Matcher m, Project p -> m.replaceAll("${(m[0][1] as int) + 1}${m[0][2]}") }
        ]
    }

    scmAdapters = [
            net.researchgate.release.GitAdapter
    ]

    git {
        requireBranch = 'master'
        pushToRemote = 'origin'
        pushToBranchPrefix = ''
        commitVersionFileOnly = true
        signTag = false
    }
}

afterReleaseBuild.dependsOn publishAllVersions