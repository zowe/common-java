import java.util.regex.Matcher

//noinspection GroovyAssignabilityCheck
group 'org.zowe.apiml'

buildscript {
    ext {
        licenseGradlePluginVerion = '0.13.1'
    }

    ext.mavenRepositories = {
        maven {
            url artifactoryMavenSnapshotRepo
            credentials {
                username mavenUser
                password mavenPassword
            }
        }
        maven {
            url artifactoryMavenRepo
            credentials {
                username mavenUser
                password mavenPassword
            }
        }
    }

    repositories mavenRepositories
    apply from: 'gradle/versions.gradle'
    apply from: 'gradle/publish.gradle'
    dependencies {
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.1.1'
        classpath 'net.researchgate:gradle-release:2.7.0'
        classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:${licenseGradlePluginVerion}"
        classpath 'org.owasp:dependency-check-gradle:3.3.4'
    }

}
plugins {
    id 'java-library'
    id 'maven-publish'
    id 'com.jfrog.bintray' version "${jfrogBinTrayVersion}"
    id 'jacoco'
    id 'com.github.hierynomus.license' version "${hierynomusLicenseVersion}"
    id 'com.adarshr.test-logger' version "${testLoggerVersion}"
}

apply from: 'gradle/versions.gradle'
apply from: 'gradle/license.gradle'
apply from: 'gradle/publish.gradle'

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'com.github.hierynomus.license'
    apply plugin: 'org.owasp.dependencycheck'
    apply plugin: 'eclipse'

    repositories mavenRepositories

    sourceCompatibility = 1.8
    version = version
}

subprojects {
    license {
        header rootProject.file('attls/.licence/EPL-2.0-licence-header.txt')
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        excludes(["**/*.yml", "**/*.yaml", "**/*.json", "**/static", "**/*.sh", "**/*.txt", "**/*.p12", "**/*.xml", "**/*.jsp", "**/*.html", "**/*.jks", "**/*.properties"])
        mapping {
            java = 'SLASHSTAR_STYLE'
        }
    }

    tasks.withType(Test) {
        maxParallelForks = 1
    }

    test {
        useJUnitPlatform()
    }

    dependencies {
        testImplementation libraries.junitJupiter
        testImplementation libraries.mockito_jupiter

        testImplementation  'org.junit.platform:junit-platform-launcher:1.6.0'

        //For Idea
        testImplementation  'org.junit.platform:junit-platform-commons:1.6.0'
        testImplementation  'org.junit.platform:junit-platform-engine:1.6.0'
    }
}

configurations {
    all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    all*.exclude group: 'com.fasterxml.jackson.module', module: 'jackson-module-kotlin'
}

task buildCore(dependsOn: [':gateway-service:build', ':discovery-service:build', ':api-catalog-services:build', ':api-catalog-ui:build',
                           ':discoverable-client:build', ':zaas-client:build']) {
    description "Build core components"
    group "build"
}

task runIntegrationTests(dependsOn: ":integration-tests:runIntegrationTests") {
    description "Run integration tests"
    group "Integration tests"
}

task runAllIntegrationTests(dependsOn: ":integration-tests:runAllIntegrationTests") {
    description "Run all integration tests"
    group "Integration tests"
}

task environmentCheck(dependsOn: ":integration-tests:environmentCheck") {
    description "Environment check"
    group "Integration tests"
}

task runCITests(dependsOn: [":integration-tests:runCITests"]) {
    description "Run Integration Test Without MF Dependencies"
    group "Integration tests"
}

task runCITestsInternalPort(dependsOn: [":integration-tests:runCITestsInternalPort"]) {
    description "Run Integration Test Without MF Dependencies, this is meant to be run after runCITests so the apiml is not automatically started here"
    group "Integration tests"
}

task runMainFrameTests(dependsOn: ":integration-tests:runMainFrameTests") {
    description "Run only tests related to the MainFrame"
    group "Integration tests"
}








if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}
